{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  notes: [{\n    id: 1,\n    title: 'Shopping list',\n    created: 'June 21, 2023',\n    content: 'Bread, cucumbers, salt',\n    category: 'Task',\n    dates: '',\n    archived: true\n  }, {\n    id: 2,\n    title: 'The theory of evolution',\n    created: 'June 29, 2023',\n    content: 'The evolution theory',\n    category: 'Random Thought',\n    dates: '',\n    archived: false\n  }, {\n    id: 3,\n    title: 'New feature',\n    created: 'July 15, 2023',\n    content: 'Implement new feature for app before 18/07/2023',\n    category: 'Idea',\n    dates: '',\n    archived: false\n  }, {\n    id: 4,\n    title: 'Workout routine',\n    created: 'July 20, 2023',\n    content: '1. Pushups 2. Situps 3. Squats',\n    category: 'Task',\n    dates: '20/07/2023, 24/07/2023',\n    archived: false\n  }, {\n    id: 5,\n    title: 'Inspirational Quote',\n    created: '2023-07-27',\n    content: 'The most important step is always the next one.',\n    category: 'Quote',\n    dates: '',\n    archived: false\n  }, {\n    id: 6,\n    title: 'Grocery shopping',\n    created: 'July 23, 2023',\n    content: 'Milk, Eggs, Bread, Fruits',\n    category: 'Task',\n    dates: '29/07/2023',\n    archived: false\n  }, {\n    id: 7,\n    title: 'Car service',\n    created: 'July 25, 2023',\n    content: 'Need to service the car',\n    category: 'Task',\n    dates: '1/08/2023',\n    archived: false\n  }]\n};\nconst notesSlice = createSlice({\n  name: 'notes',\n  initialState,\n  reducers: {\n    createNote: (state, action) => {\n      state.notes.push(action.payload);\n    },\n    editNote: (state, action) => {\n      const {\n        id,\n        title,\n        category,\n        content,\n        dates\n      } = action.payload;\n      const noteToEdit = state.notes.find(note => note.id === id);\n      if (noteToEdit) {\n        noteToEdit.title = title;\n        noteToEdit.category = category;\n        noteToEdit.content = content;\n        noteToEdit.dates = dates;\n      }\n    },\n    toggleArchive: (state, action) => {\n      const id = action.payload;\n      const toggledNote = state.notes.find(note => note.id === id);\n      if (toggledNote) {\n        toggledNote.archived = !toggledNote.archived;\n      }\n    },\n    removeNote: (state, action) => {\n      state.notes = state.notes.filter(note => note.id !== action.payload);\n    }\n  }\n});\nexport const {\n  createNote,\n  removeNote,\n  editNote,\n  toggleArchive\n} = notesSlice.actions;\nexport default notesSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","notes","id","title","created","content","category","dates","archived","notesSlice","name","reducers","createNote","state","action","push","payload","editNote","noteToEdit","find","note","toggleArchive","toggledNote","removeNote","filter","actions","reducer"],"sources":["C:/Users/Admin/WebstormProjects/Front/radency_company/notes_app_reactNodeJS/client/src/store/notesSlice.tsx"],"sourcesContent":["import {createSlice, PayloadAction} from \"@reduxjs/toolkit\"\r\n\r\nexport type NoteType = {\r\n  id: any\r\n  title: string\r\n  category: string\r\n  content: string\r\n  created: string\r\n  dates: string\r\n  archived: boolean\r\n}\r\n\r\nexport type NoteEditType = {\r\n  id: any\r\n  title: string\r\n  category: string\r\n  content: string\r\n  dates: string\r\n}\r\n\r\ntype NotesStateType = {\r\n  notes: NoteType[]\r\n}\r\n\r\nconst initialState: NotesStateType = {\r\n  notes: [\r\n    {\r\n      id: 1,\r\n      title: 'Shopping list',\r\n      created: 'June 21, 2023',\r\n      content: 'Bread, cucumbers, salt',\r\n      category: 'Task',\r\n      dates: '',\r\n      archived: true,\r\n    },\r\n    {\r\n      id: 2,\r\n      title: 'The theory of evolution',\r\n      created: 'June 29, 2023',\r\n      content: 'The evolution theory',\r\n      category: 'Random Thought',\r\n      dates: '',\r\n      archived: false,\r\n    },\r\n    {\r\n      id: 3,\r\n      title: 'New feature',\r\n      created: 'July 15, 2023',\r\n      content: 'Implement new feature for app before 18/07/2023',\r\n      category: 'Idea',\r\n      dates: '',\r\n      archived: false,\r\n    },\r\n    {\r\n      id: 4,\r\n      title: 'Workout routine',\r\n      created: 'July 20, 2023',\r\n      content: '1. Pushups 2. Situps 3. Squats',\r\n      category: 'Task',\r\n      dates: '20/07/2023, 24/07/2023',\r\n      archived: false,\r\n    },\r\n    {\r\n      id: 5,\r\n      title: 'Inspirational Quote',\r\n      created: '2023-07-27',\r\n      content: 'The most important step is always the next one.',\r\n      category: 'Quote',\r\n      dates: '',\r\n      archived: false,\r\n    },\r\n    {\r\n      id: 6,\r\n      title: 'Grocery shopping',\r\n      created: 'July 23, 2023',\r\n      content: 'Milk, Eggs, Bread, Fruits',\r\n      category: 'Task',\r\n      dates: '29/07/2023',\r\n      archived: false,\r\n    },\r\n    {\r\n      id: 7,\r\n      title: 'Car service',\r\n      created: 'July 25, 2023',\r\n      content: 'Need to service the car',\r\n      category: 'Task',\r\n      dates: '1/08/2023',\r\n      archived: false,\r\n    }\r\n  ]\r\n}\r\n\r\n\r\nconst notesSlice = createSlice({\r\n  name: 'notes',\r\n  initialState,\r\n  reducers: {\r\n    createNote: (state, action: PayloadAction<NoteType>) => {\r\n      state.notes.push(action.payload)\r\n    },\r\n    editNote: (state, action: PayloadAction<NoteEditType>) => {\r\n      const {id, title, category, content, dates} = action.payload\r\n      const noteToEdit = state.notes.find((note) => note.id === id)\r\n      if (noteToEdit) {\r\n        noteToEdit.title = title\r\n        noteToEdit.category = category\r\n        noteToEdit.content = content\r\n        noteToEdit.dates = dates\r\n      }\r\n    },\r\n    toggleArchive: (state, action: PayloadAction<number>) => {\r\n      const id = action.payload\r\n      const toggledNote = state.notes.find(note => note.id === id)\r\n      if (toggledNote) {\r\n        toggledNote.archived = !toggledNote.archived\r\n      }\r\n    },\r\n    removeNote: (state, action: PayloadAction<number>) => {\r\n      state.notes = state.notes.filter((note) => note.id !== action.payload)\r\n    }\r\n  }\r\n})\r\n\r\nexport const {\r\n  createNote,\r\n  removeNote,\r\n  editNote,\r\n  toggleArchive\r\n} = notesSlice.actions\r\n\r\n\r\nexport default notesSlice.reducer"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}